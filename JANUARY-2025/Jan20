// First Completely Painted Row or Column (Medium)
/*
You are given a 0-indexed integer array arr, and an m x n integer matrix mat. arr and mat both contain all the integers in the range [1, m * n].
Go through each index i in arr starting from index 0 and paint the cell in mat containing the integer arr[i].
Return the smallest index i at which either a row or a column will be completely painted in mat.

Constraints:
m == mat.length
n = mat[i].length
arr.length == m * n
1 <= m, n <= 105
1 <= m * n <= 105
1 <= arr[i], mat[r][c] <= m * n
All the integers of arr are unique.
All the integers of mat are unique.

#Intuition: If a row is completely filled it means it satisfy all the columns vice verca. 
class Solution {
public:
    int firstCompleteIndex(vector<int>& arr, vector<vector<int>>& mat) {
        int mr = mat.size();  // Get the number of rows and columns in the matrix
        int mc = mat[0].size();

        // Map each matrix element to its corresponding row and column indices
        unordered_map<int, pair<int, int>> mp;
        for (int i = 0; i < mr; i++) {
            for (int j = 0; j < mc; j++) {
                mp[mat[i][j]] = {i, j};
            }
        }

        // Use maps to track the number of marked elements in each row and column
        unordered_map<int, int> r, c;

        for (int i = 0; i < arr.size(); i++) { // Iterate through the elements in the array `arr`
            int e = arr[i];

            // Check if the element exists in the matrix
            if (mp.find(e) != mp.end()) {
                // Increment the count of marked elements for the respective row and column
                r[mp[e].first]++; 
                c[mp[e].second]++;

                // Check if the row or column is completely marked
                if (r[mp[e].first] == mc || c[p[e].second] == mr) {
                    return i;    // Return the index when the first row or column is fully marked
                }
            }
        }
        return -1;  // Return -1 if no row or column becomes completely marked
    }
};

//Time Complexity: O(m×n)+O(k) = O(m×n+k)
//Space Complexity: O(m×n+m+n)
