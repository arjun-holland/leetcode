// Minimize XOR (Medium)
/*Given two positive integers num1 and num2, find the positive integer x such that:
x has the same number of set bits as num2, and
The value x XOR num1 is minimal.
Note that XOR is the bitwise XOR operation.
Return the integer x. The test cases are generated such that x is uniquely determined.
The number of set bits of an integer is the number of 1's in its binary representation.
Constraints:
1 <= num1, num2 <= 10^9*/

//num << r : num will become (num*2^r) 
//1<<0 => 1<<2^0 => 1*2^0 => 1*1 => 1 => 01 (binary format) //only 1st bit is set
//1<<1 => 1<<2^1 => 1*2^1 => 1*2 => 2 => 10  //only 2nd bit is set
//1<<2 => 1<<2^2 => 1*2^2 => 1*4 => 4 => 100  //only third bit is set
//:
//:

class Solution {
public:
    bool isSet(int &x, int bit) {
        return x & (1 << bit);
    }
    void setBit(int &x, int bit) {
        x |= (1 << bit);    // Sets the `bit` in `x` to 1
    }
    void unsetBit(int &x, int bit) {
        x &= ~(1 << bit);    // Clears the `bit` in `x` (sets it to 0)
    }

    int minimizeXor(int num1, int num2) {
        int x = num1;
        int requiredSetBitCount = __builtin_popcount(num2);
        int currSetBitCount = __builtin_popcount(x);

        if(requiredSetBitCount == currSetBitCount)return x;

        int bit = 0;   //position of bit (least significant position (LSB))
        if(currSetBitCount < requiredSetBitCount) {
            while(currSetBitCount < requiredSetBitCount) {
                if(!isSet(x, bit)) {
                    setBit(x, bit);
                    currSetBitCount++;
                }
                bit++;
            }
        } else if(currSetBitCount > requiredSetBitCount) {
            while(currSetBitCount > requiredSetBitCount) {
                if(isSet(x, bit)) {    // Find set bits and unset them to 0
                    unsetBit(x, bit);
                    currSetBitCount--;
                }
                bit++;
            }
        }
        return x;
    }
};
