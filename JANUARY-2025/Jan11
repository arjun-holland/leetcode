// Construct K Palindrome Strings
/*Given a string s and an integer k, return true if you can use all the characters in s to construct k palindrome strings or false otherwise.

Constraints:
1 <= s.length <= 105
s consists of lowercase English letters.
1 <= k <= 105*/

class Solution {
public:
    bool canConstruct(string s, int k) {
        // If the length of string 's' is less than k, it's impossible to split it into k palindromic substrings.
        if(s.length() < k) return false;
        unordered_map<char, int> mp; //Create a frequency map to count occurrences of each character in 's'.

        for(char c : s){
            mp[c]++;                 // Increment the count for each character in the string.
        }

        int noc = 0;       // 'noc' represents the number of characters that have an odd frequency.
        for(auto e : mp){        // Iterate through the frequency map to count how many characters have an odd frequency.
            if(e.second % 2 != 0)  // If a character has an odd frequency.
                noc++;            // Increment the odd count.
        }

        // If there are more than k characters with odd frequencies, it is impossible to form k palindromic substrings.
        // Palindromes can only have one character with an odd frequency (in the center) or no odd frequency.
        return noc <= k;
    }
};
Time Complexity : O(n+m)=O(n)
m≤26, it is considered a constant, so the time complexity is O(n), where n is the length of the string.
Space complexity : O(m)=O(1)
Where
m is the number of distinct characters. Since 
m≤26, the space complexity is constant O(1), considering the alphabet size is fixed.
