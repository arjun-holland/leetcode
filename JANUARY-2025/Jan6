//Minimum Number of Operations to Move All Balls to Each Box
/*You have n boxes. You are given a binary string boxes of length n, where boxes[i] is '0' if the ith box is empty, and '1' if it contains one ball.

In one operation, you can move one ball from a box to an adjacent box. Box i is adjacent to box j if abs(i - j) == 1. Note that after doing so, there may be more than one ball in some boxes.

Return an array answer of size n, where answer[i] is the minimum number of operations needed to move all the balls to the ith box.

Each answer[i] is calculated considering the initial state of the boxes.*/

Constraints:
n == boxes.length
1 <= n <= 2000
boxes[i] is either '0' or '1'.
as the constraints are low O(n^2) solution is also accepted

class Solution {
public:
    vector<int> minOperations(string boxes) {
        vector<int> ans;
        for(int i=0;i<boxes.size();i++){
            int a = 0;
            for(int j=0;j<boxes.size();j++){
                if(i == j)continue;
                if(boxes[j] == '1'){
                    a += abs(j-i);
                }
            }
            ans.push_back(a);
        }
        return ans;
    }
};

//Time Complexity : O(n^2)
//Space Complexity :O(1)
