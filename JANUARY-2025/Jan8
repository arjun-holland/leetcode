//Count Prefix and Suffix Pairs I

/*You are given a 0-indexed string array words.
Let's define a boolean function isPrefixAndSuffix that takes two strings, str1 and str2:
isPrefixAndSuffix(str1, str2) returns true if str1 is both a prefix and a suffix of str2, and false otherwise.For example, isPrefixAndSuffix("aba", "ababa") is true because "aba" is a prefix of "ababa" and also a suffix, but isPrefixAndSuffix("abc", "abcd") is false.
Return an integer denoting the number of index pairs (i, j) such that i < j, and isPrefixAndSuffix(words[i], words[j]) is true.

Constraints:
1 <= words.length <= 50//as constraints are very low it accepts O(n^2) time complexity
1 <= words[i].length <= 10
words[i] consists only of lowercase English letters.*/

class Solution {
public:
    int countPrefixSuffixPairs(vector<string>& words) {
        int ans  = 0;
        for(int i=0;i<words.size();i++){
            for(int j=i+1;j<words.size();j++){
                string s1 = words[i] , s2 = words[j];
                if(s2.find(s1) == 0 && s2.rfind(s1) == (s2.size()-s1.size())){ //s1.find(s2) returns the first occurance of s2 in s1
                    ans++;
                }
            }
        }
        return ans;
    }
};
//Time Complexity: O(n^2)
//Space Complexity: O(1)
