//Count Servers that Communicate (Medium)
/*You are given a map of a server center, represented as a m * n integer matrix grid, 
where 1 means that on that cell there is a server and 0 means that it is no server.
Two servers are said to communicate if they are on the same row or on the same column.
Return the number of servers that communicate with any other server.
Constraints:
m == grid.length
n == grid[i].length
1 <= m <= 250
1 <= n <= 250
grid[i][j] == 0 or 1*/

//Algorithm
// Step 1: Initialize two vectors to keep track of the number of servers in each row and column.
// Step 2: Traverse the grid to count the number of servers in each row and column.
// Step 3: Now, count the total number of servers that are connected (either in the same row or column).
                // If there's a server at position grid[i][j] AND either its row or column has more than one server,
                // it means this server is connected to others (either in the same row or column).
// Step 4: Return the total number of connected servers.

class Solution {
public:
    int countServers(vector<vector<int>>& grid) {
        vector<int> rows(grid.size(), 0);        // For each row, count how many servers it has.
        vector<int> columns(grid[0].size(), 0);   // For each column, count how many servers it has.

        for (int i = 0; i < grid.size(); i++) {
            for (int j = 0; j < grid[0].size(); j++) {
                if (grid[i][j] == 1) {   // If there's a server at this position.
                    rows[i]++;             // Increment the count for this row.
                    columns[j]++;          // Increment the count for this column.
                }
            }
        }

        int tot_servers = 0;    // Variable to store the total number of connected servers.
        
        // Traverse the grid again to check if the server at grid[i][j] is connected.
        for (int i = 0; i < grid.size(); i++) {
            for (int j = 0; j < grid[0].size(); j++) {
                if (grid[i][j] == 1 && (rows[i] > 1 || columns[j] > 1)) {
                     tot_servers++;  // Increment the count of connected servers.
                }
            }
        }
        return tot_servers;
    }
};
//T.C : O(m*n)
//S.C : O(m+n)
