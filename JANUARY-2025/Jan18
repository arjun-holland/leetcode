//Neighboring Bitwise XOR (Medium)
/*A 0-indexed array derived with length n is derived by computing 
the bitwise XOR (⊕) of adjacent values in a binary array original of length n.
Specifically, for each index i in the range [0, n - 1]:
If i = n - 1, then derived[i] = original[i] ⊕ original[0].
Otherwise, derived[i] = original[i] ⊕ original[i + 1].
Given an array derived, your task is to determine whether
there exists a valid binary array original that could have formed derived.
Return true if such an array exists or false otherwise.
A binary array is an array containing only 0's and 1's.

Constraints:
n == derived.length
1 <= n <= 105
The values in derived are either 0's or 1's

XOR properties:
  A^A = 0
  A^0 = 0
*/

//brute force 
class Solution {
public:
    bool doesValidArrayExist(vector<int>& derived) {
        int n = derived.size(); // Get the size of the input array

        vector<int> org(n); // Create a vector to store the original array
        org[0] = 0; // Assume the first element of the original array is 0

        // Generate the rest of the original array using the XOR relationship
        for (int i = 1; i <= n - 1; i++) {
            // org[i] = org[i-1] XOR derived[i-1]
            // This follows the rule derived[i-1] = org[i-1] XOR org[i],
            // solving for org[i] assuming org[0] = 0,(X^y=z or x=y^z or x^z=y as XOR follows commutative property)
            org[i] = org[i - 1] ^ derived[i - 1];
        }

        // Check if the XOR condition holds true for the circular relationship
        if (org[n - 1] ^ org[0] == derived[n - 1])
            return true;
        return false;  // If the condition is not met, return false
    }
};
//Time Complexity : O(n)
//Space Complexity: O(n)

/*
The brute force approach computes the entire `org` array based on the `derived` array,
checks the circular XOR relationship, and determines if a valid array exists.
This can be simplified by observing a key property:
*/

//if derived array contains odd no.of one's then return false else return true as even no.of ones result in 0
//better approach
class Solution {
public:
    bool doesValidArrayExist(vector<int>& derived) {

        // `Xor` will store the cumulative XOR of all elements in `derived`
        int Xor = 0;

        // Compute the XOR of all elements in the derived array
        for (int e : derived) {
            Xor = Xor ^ e; // Accumulate XOR
        }

        // If the cumulative XOR is 0, it means a valid original array exists.
        // This is because XOR of all derived elements being 0 implies that the circular XOR condition is satisfied.
        return Xor == 0;
    }
};
//Time Complexity : O(n)
//Space Complexity :O(1)
