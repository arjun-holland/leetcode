//Find the Prefix Common Array of Two Arrays
/*You are given two 0-indexed integer permutations A and B of length n.

A prefix common array of A and B is an array C such that C[i] is equal to the count of numbers that are present at or before the index i in both A and B.

Return the prefix common array of A and B.

A sequence of n integers is called a permutation if it contains all integers from 1 to n exactly once.

onstraints:
1 <= A.length == B.length == n <= 50
1 <= A[i], B[i] <= n
It is guaranteed that A and B are both a permutation of n integers*/

//Brute force approach(Simulation approach)
class Solution {
public:
    int check(int n,vector<int>& A, vector<int>& B){
        int ans = 0;
        set<int> b;
        for(int i=0;i<=n;i++){
            b.insert(B[i]);
        }
        for(int i=0;i<=n;i++){
            int e = A[i];
            if(b.find(e) != b.end())ans++;
        }
        return ans;
    }
    vector<int> findThePrefixCommonArray(vector<int>& A, vector<int>& B) {
        int n = A.size();
        vector<int> c;
        for(int i=0;i<n;i++){
            int ca = check(i,A,B);
            c.push_back(ca);
        }
        return c;
    }
};
//Time Complexity : O(n^2)
//Space Complexity: O(n)
