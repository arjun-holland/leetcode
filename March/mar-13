// Zero Array Transformation II(Medium)
/*
You are given an integer array nums of length n and a 2D array queries where queries[i] = [li, ri, vali].
Each queries[i] represents the following action on nums:
Decrement the value at each index in the range [li, ri] in nums by at most vali.
The amount by which each value is decremented can be chosen independently for each index.
A Zero Array is an array with all its elements equal to 0.
Return the minimum possible non-negative value of k, such that after processing the first k queries in sequence, nums becomes a Zero Array. If no such k exists, return -1.

Example 1:
Input: nums = [2,0,2], queries = [[0,2,1],[0,2,1],[1,1,3]]
Output: 2
Explanation:
For i = 0 (l = 0, r = 2, val = 1):
Decrement values at indices [0, 1, 2] by [1, 0, 1] respectively.
The array will become [1, 0, 1].
For i = 1 (l = 0, r = 2, val = 1):
Decrement values at indices [0, 1, 2] by [1, 0, 1] respectively.
The array will become [0, 0, 0], which is a Zero Array. Therefore, the minimum value of k is 2.

Constraints:
1 <= nums.length <= 10^5
0 <= nums[i] <= 5 * 10^5
1 <= queries.length <= 10^5
queries[i].length == 3
0 <= li <= ri < nums.length
1 <= vali <= 5
*/


//Tecnique: different array technique as we ferform operation on rangees ion array
class Solution {
public:
    int n;
    int Q;

    bool checkWithDifferenceArrayTeq(vector<int>& nums, vector<vector<int>>& queries, int k) {
        vector<int> diff(n, 0);       //O(Q)
        for(int i = 0; i <= k; i++) { //difference array technique
            int l = queries[i][0];
            int r = queries[i][1];
            int x = queries[i][2];

            diff[l] += x;    //step 1: incremented the left index with x value
            if(r+1 < n)      //step 2: decremented the right index + 1 with x value
                diff[r+1] -= x;
        }
        for(int i = 1; i < n; i++){  //step 3: commulative sum 
            diff[i] = diff[i-1] + diff[i];
        }
        for(int i = 0; i < n; i++) {
            if(nums[i] - diff[i] > 0) { //nums[i] 0 
                return false;
            }
        }
        return true;
    }

    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        n = nums.size();
        Q = queries.size();

        auto lambda = [](int x) {
            return x == 0;
        };
        if(all_of(begin(nums), end(nums), lambda)) {
            return 0;               //no query required because all are already zero
        }
        
        // for(int i = 0; i < Q; i++) {           //O(Q * (Q + n))
        //     if(checkWithDifferenceArrayTeq(nums, queries, i) == true) {
        //         return i+1;
        //     }
        // }

        // Binary search for to reduce the time complexity 
        int l = 0;
        int r = Q-1;
        int k = -1;
        while(l <= r) {
            int mid = l + (r-l)/2;
            if(checkWithDifferenceArrayTeq(nums, queries, mid) == true) {
                k = mid+1;  //possible answer
                r = mid-1;
            } else {
                l = mid+1;
            }
        }
        return k;
    }
};
