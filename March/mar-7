//Closest Prime Numbers in Range(Medium)
/*
Given two positive integers left and right, find the two integers num1 and num2 such that:
left <= num1 < num2 <= right .
Both num1 and num2 are prime numbers.
num2 - num1 is the minimum amongst all other pairs satisfying the above conditions.
Return the positive integer array ans = [num1, num2]. If there are multiple pairs satisfying these conditions,
return the one with the smallest num1 value. If no such numbers exist, return [-1, -1].
Constraints:
1 <= left <= right <= 10^6
*/
class Solution {
public:
    bool isPrime(int n){
        if(n==1)return false;
        for(int i=2;i*i<=n;i++){
            if(n%i == 0)return false;
        }
        return true;
    }
    void solve(int l,int r,vector<int> &v){
        for(int i=l; i<=r; i++){
            if(isPrime(i))v.push_back(i);
        }
    }
    vector<int> closestPrimes(int left, int right) {
        vector<int> v;
        vector<int> ans = {-1,-1};
        if(left == 1 && right == 1)return ans;
        solve(left,right,v);
        int m = INT_MAX;
        if(v.empty())return ans;
        for(int i=0;i<v.size()-1;i++){
            if(v[i+1]-v[i] < m){
                m = v[i+1] - v[i];
                ans = {v[i],v[i+1]};
            }
        }
        return ans;
    }
};
/*
Time Complexity
The dominant term is the prime-checking step in solve(), so the overall time complexity is: O((r−l+1)× sq(r))
*/


//using the Sieve of Eratosthenes for time complexity (O(N log log N))
//The number of distinct prime factors of a number nNis approximately log log N (from Number Theory).

class Solution {
public:
    vector<bool> sieve(int n) {
        vector<bool> is_prime(n + 1, true);
        is_prime[0] = is_prime[1] = false;
        for (int i = 2; i * i <= n; i++) {
            if (is_prime[i]) {
                for (int j = i * i; j <= n; j += i) {
                    is_prime[j] = false;
                }
            }
        }
        return is_prime;
    }

    vector<int> closestPrimes(int left, int right) {
        vector<bool> is_prime = sieve(right);
        vector<int> v, ans = {-1, -1};
        
        for (int i = left; i <= right; i++) {
            if (is_prime[i]) v.push_back(i);
        }
        
        if (v.size() < 2) return ans;
        
        int minDiff = INT_MAX;
        for (int i = 0; i < v.size() - 1; i++) {
            if (v[i + 1] - v[i] < minDiff) {
                minDiff = v[i + 1] - v[i];
                ans = {v[i], v[i + 1]};
            }
        }
        return ans;
    }
};
