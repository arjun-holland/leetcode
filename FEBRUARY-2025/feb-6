//Tuple with Same Product(Medium)
/*
Given an array nums of distinct positive integers, 
return the number of tuples (a, b, c, d) such that a * b = c * d 
where a, b, c, and d are elements of nums, and a != b != c != d.

Constraints:
1 <= nums.length <= 1000
1 <= nums[i] <= 10^4
All elements in nums are distinct.
*/

//T.C : O(n^3)
class Solution {
public:
    int tupleSameProduct(vector<int>& nums) {
         int ans = 0;
         sort(nums.begin(),nums.end());
         for(int i=0;i<nums.size();i++){
             for(int j=nums.size()-1;j>i;j--){
                 int product = nums[i]*nums[j];
                 unordered_set<int> seen;
                 for(int k=i;k<j;k++){
                     if((product % nums[k] == 0) && (seen.count(product / nums[k])))
                         ans += 8;
                     seen.insert(nums[k]);    
                 }
             }
         }
        return ans;
    }
};

//T.C : O(n^2)
class Solution {
public:
    int tupleSameProduct(vector<int>& nums) {
        int ans = 0;
        unordered_map<int,int> mp;

        for(int i=0;i<nums.size();i++){
            for(int j=i+1;j<nums.size();j++){
                int p = nums[i]*nums[j];
                ans += 8 * mp[p];
                mp[p]++;
            }
        }
        return ans;
    }
};
