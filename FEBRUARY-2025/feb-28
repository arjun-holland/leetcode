//Length of Longest Fibonacci Subsequence(Medium)
/*
A sequence x1, x2, ..., xn is Fibonacci-like if:
-n >= 3
-xi + xi+1 == xi+2 for all i + 2 <= n
Given a strictly increasing array arr of positive integers forming a sequence, return the length of 
the longest Fibonacci-like subsequence of arr. If one does not exist, return 0.
A subsequence is derived from another sequence arr by deleting any number of elements (including none) from arr,
without changing the order of the remaining elements. For example, [3, 5, 8] is a subsequence of [3, 4, 5, 6, 7, 8].
Constraints:
3 <= arr.length <= 1000
1 <= arr[i] < arr[i + 1] <= 10^9
*/
//Intuition : for most of the subsequence problemns use recurssion or memoization ie Dinamic programming technique

class Solution {
public:
    int solve(int s,int t,vector<int>& arr,unordered_map<int,int>& mp){
        int fe = arr[t] - arr[s];
        if(mp.count(fe) && mp[fe] < s){ // i < j < k
            int f = mp[fe];
            return 1+solve(f,s,arr,mp);
        } 
        return 2;
    }

    int lenLongestFibSubseq(vector<int>& arr) {
        int n = arr.size();
        unordered_map<int,int> mp;
        for(int i=0; i<n; i++){
            mp[arr[i]] = i;  //element -> index
        }
        int res = 0;
        // j < k
        for(int j=1; j<n; j++){
            for(int k=j+1; k<n; k++){
                int curlen = solve(j,k,arr,mp);
                if(curlen >= 3)res = max(res,curlen);
            }
        }
        return res;
    }
};
//T.C : O(n^3)
//S.C : O(n)


//memoization
class Solution {
public:
    int solve(int s,int t,vector<int>& arr,unordered_map<int,int>& mp,vector<vector<int>>& memo){
        if(memo[s][t] != -1)return memo[s][t];
        int fe = arr[t] - arr[s];
        if(mp.count(fe) && mp[fe] < s){ // i < j < k
            int f = mp[fe];
            return memo[s][t] = 1+solve(f,s,arr,mp,memo);
        } 
        return memo[s][t] = 2;
    }

    int lenLongestFibSubseq(vector<int>& arr) {
        int n = arr.size();
        unordered_map<int,int> mp;
        for(int i=0; i<n; i++){
            mp[arr[i]] = i;  //element -> index
        }
        int res = 0;
        vector<vector<int>> t(n,vector<int>(n,-1)); //memoization
        // j < k
        for(int j=1; j<n; j++){
            for(int k=j+1; k<n; k++){
                int curlen = solve(j,k,arr,mp,t);
                if(curlen >= 3)res = max(res,curlen);
            }
        }
        return res;
    }
};


 
