// Max Sum of a Pair With Equal Sum of Digits(Medium)
/*
You are given a 0-indexed array nums consisting of positive integers. 
You can choose two indices i and j, such that i != j, and the sum of digits of the number nums[i] is equal to that of nums[j].
Return the maximum value of nums[i] + nums[j] that you can obtain over all possible indices i and j that satisfy the conditions.
Constraints:
1 <= nums.length <= 10^5
1 <= nums[i] <= 10^9
*/

class Solution {
public:
    int solve(int n){
        int s = 0,nd = 0;
        while(n>0){
            s += n % 10;
            n /= 10;
        }
        return s;
    }
    int maximumSum(vector<int>& nums) {
        unordered_map<int,int> ans;
        unordered_map<int,vector<int>> ele;
        for(int n : nums){
            int v = solve(n);
            ans[v]++;
            ele[v].push_back(n);
        }
        int r = -1;
        for(auto [e,f] : ans){
            if(f >= 2 && ele.find(e) != ele.end()){
                    vector<int> sa = ele[e];
                    sort(sa.begin(),sa.end());
                    r = max(r,sa[sa.size()-1]+sa[sa.size()-2]);
            }
        }
        return r;
    }
};
//Time Complexity : O(N logN)
//Space Complexity : O(2*n)
