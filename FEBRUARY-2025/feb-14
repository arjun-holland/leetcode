// Product of the Last K Numbers (Medium)
/*
Design an algorithm that accepts a stream of integers and retrieves the product of the last k integers of the stream.
Implement the ProductOfNumbers class:
ProductOfNumbers() Initializes the object with an empty stream.
void add(int num) Appends the integer num to the stream.
int getProduct(int k) Returns the product of the last k numbers in the current list. 
You can assume that always the current list has at least k numbers.
The test cases are generated so that, at any time, the product of any contiguous sequence of numbers 
will fit into a single 32-bit integer without overflowing.
Constraints:
0 <= num <= 100
1 <= k <= 4 * 10^4
At most 4 * 10^4 calls will be made to add and getProduct.
The product of the stream at any point in time will fit in a 32-bit integer.
*/

class ProductOfNumbers {
private:
    vector<int> v;
public:
    ProductOfNumbers() {
        v = {};
    }
    
    void add(int num) {
        v.push_back(num);
    }
    
    int getProduct(int k) {
        int r = 1;
        int n = v.size()-1;
        while(k--){
            r *= v[n];
            n--;
        }
        return r;
    }
};

/**
 * Your ProductOfNumbers object will be instantiated and called as such:
 * ProductOfNumbers* obj = new ProductOfNumbers();
 * obj->add(num);
 * int param_2 = obj->getProduct(k);
 */
