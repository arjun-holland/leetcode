//Find Elements in a Contaminated Binary Tree(Medium)
/*
Given a binary tree with the following rules:
root.val == 0
For any treeNode:
If treeNode.val has a value x and treeNode.left != null, then treeNode.left.val == 2 * x + 1
If treeNode.val has a value x and treeNode.right != null, then treeNode.right.val == 2 * x + 2
Now the binary tree is contaminated, which means all treeNode.val have been changed to -1.
Implement the FindElements class:
FindElements(TreeNode* root) Initializes the object with a contaminated binary tree and recovers it.
bool find(int target) Returns true if the target value exists in the recovered binary tree.
Constraints:
TreeNode.val == -1
The height of the binary tree is less than or equal to 20
The total number of nodes is between [1, 104]
Total calls of find() is between [1, 104]
0 <= target <= 10^6
*/

class FindElements {
public:
    unordered_set<int> st;
    FindElements(TreeNode* root) {
        root->val = 0;
        queue<TreeNode*> q;
        q.push(root);
        while(!q.empty()){
            TreeNode* p = q.front();
            st.insert(p->val);
            q.pop();
            if(p->left){
                p->left->val = 2*p->val+1;
                q.push(p->left);
            }
            if(p->right){
                p->right->val = 2*p->val+2;
                q.push(p->right);
            }
        }
    }
    
    bool find(int target) {
        if(st.count(target))return true;
        return false;
    }
};
